Here’s a tight, step-by-step plan to connect your app to CityCatalyst’s OAuth 2.0 (PKCE) and call the API.

0) What the docs say (key facts)

Auth method: OAuth 2.0 with JWT access tokens. 
GitHub

PKCE is required. 
GitHub

AuthZ URL (dev): https://citycatalyst.openearth.dev/authorize/
Token URL (dev): https://citycatalyst.openearth.dev/api/v0/token/
(Clients are created in the “OAuth 2.0 Clients Admin Panel”.) 
GitHub

Swagger is available for dev and prod to try calls once you have a token. 
GitHub

1) Register an OAuth client

In the OAuth Clients Admin Panel, create a client for your app. Capture:

client_id

Allowed redirect URI(s) (e.g., https://yourapp.com/api/auth/callback)

(No client_secret needed for PKCE public clients)

Choose dev vs prod environment and mirror the redirect URIs accordingly. (Docs list dev URLs explicitly; confirm the prod equivalents in the admin panel.) 
GitHub

2) Implement Authorization Code + PKCE (Next.js)

Use a solid browser-safe OAuth lib (docs recommend oauth4webapi or oidc-client-ts). 
GitHub

Flow outline

Generate code_verifier (43–128 chars) and code_challenge = base64url(SHA256(code_verifier)).

Redirect user to the Authorization URL with:

response_type=code

client_id

redirect_uri

code_challenge, code_challenge_method=S256

state (CSRF protection)

(optional) scope if your server enforces scopes (not specified in docs; safe to omit unless your admin mandates) 
GitHub

Handle redirect on /api/auth/callback:

Verify state

Exchange code at the Token URL with grant_type=authorization_code, client_id, redirect_uri, code_verifier. 
GitHub

Receive a JWT access token (and maybe a refresh token; not documented—plan to re-authenticate when it expires if no refresh token is issued). 
GitHub

Minimal Next.js shape

GET /api/auth/login → builds authorize URL + redirects

GET /api/auth/callback → exchanges code → sets an httpOnly session cookie with token (server-side)

Call backend API from the server (or from the client via your own Next.js API routes) with Authorization: Bearer <token>

3) Call CityCatalyst API with the token

Use Authorization: Bearer <access_token> against endpoints like:

GET /api/v0/city/:locode (info)

GET /api/v0/city/:locode/boundary (GeoJSON)

Inventory endpoints, etc. 
GitHub

You can try the same calls in Swagger (dev/prod) by pasting your token to verify perms. 
GitHub

4) Storage, refresh, logout

Store token server-side (session in an httpOnly cookie) to avoid exposing it. Track exp in the JWT to know when to re-auth. (Docs don’t publish a refresh endpoint—assume re-auth on expiry unless your admin enables refresh.) 
GitHub

For app login UX, the repo notes user login/logout is handled by NextAuth in their stack; your OAuth client flow is separate and used for API access. (Good to know if you integrate with their UI.) 
GitHub

5) Environments & settings checklist

Base URLs:

Dev: authorize + token under citycatalyst.openearth.dev (per wiki) 
GitHub

Prod: confirm equivalent auth/token endpoints in the admin panel.

Redirect URIs: must exactly match what you registered.

PKCE: ensure S256 method; store the code_verifier until callback.

6) Quick test plan

Register a dev client with redirect http://localhost:3000/api/auth/callback.

Hit /api/auth/login → approve → back to callback → exchange code → store token.

curl -H "Authorization: Bearer $TOKEN" https://citycatalyst.openearth.dev/api/v0/city/DE_BER/boundary → should return a GeoJSON shape if authorized. 
GitHub

7) Common gotchas (and fixes)

Missing PKCE → token exchange fails. Always send code_verifier on the POST to the token endpoint. 
GitHub

Redirect URI mismatch → ensure exact match (incl. scheme/host/path).

Wrong environment → dev token won’t work on prod base URLs; be consistent with where you authorized. 
GitHub

CORS exchanging tokens in the browser** → prefer doing the token exchange on the server route (Next.js API) and keep tokens server-side.

If you want, I can drop in a tiny Next.js oauth4webapi starter (login + callback handlers) wired to those dev endpoints and return a working fetchWithAuth helper to call /api/v0/city/:locode/boundary.