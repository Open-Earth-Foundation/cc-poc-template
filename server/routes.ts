import type { Express } from "express";
import { createServer, type Server } from "http";
import { storage } from "./storage";
import { 
  generateOAuthState, 
  exchangeCodeForToken, 
  getUserProfile, 
  createOrUpdateUser,
  generateSessionToken 
} from "./services/authService";
import { searchBoundaries, getBoundaryGeometry } from "./services/osmService";
import { getUserAccessibleCities, getCityById } from "./services/cityService";
import { insertBoundarySchema } from "@shared/schema";

export async function registerRoutes(app: Express): Promise<Server> {
  
  // Authentication routes
  app.get('/api/auth/oauth/initiate', async (req, res) => {
    try {
      // Clear any existing session to ensure completely fresh start
      const oldSessionId = req.cookies.session_id;
      if (oldSessionId) {
        console.log('üßπ Clearing old session for fresh OAuth initiation');
        await storage.deleteSession(oldSessionId);
        res.clearCookie('session_id');
      }
      
      const oauthState = generateOAuthState();
      
      // Store the state and code verifier in session
      const session = await storage.createSession({
        userId: '', // Will be filled after OAuth callback
        token: generateSessionToken(),
        codeVerifier: oauthState.codeVerifier,
        state: oauthState.state,
        expiresAt: new Date(Date.now() + 10 * 60 * 1000), // 10 minutes
      });
      
      // Set session cookie
      res.cookie('session_id', session.id, {
        httpOnly: true,
        secure: process.env.NODE_ENV === 'production',
        maxAge: 10 * 60 * 1000, // 10 minutes
      });
      
      console.log('‚úÖ Fresh OAuth session created with new state and verifier');
      res.json({
        authUrl: oauthState.authUrl,
        state: oauthState.state,
      });
    } catch (error) {
      console.error('OAuth initiation error:', error);
      res.status(500).json({ message: 'Failed to initiate OAuth flow' });
    }
  });

  app.get('/api/auth/oauth/callback', async (req, res) => {
    try {
      const { code, state, error, error_description } = req.query;
      
      // Handle OAuth errors
      if (error) {
        console.error('OAuth error:', error, error_description);
        return res.redirect(`/login?error=${encodeURIComponent(error_description as string || error as string)}`);
      }
      
      // Validate required parameters
      if (!code || !state) {
        return res.redirect('/login?error=Missing authorization code or state');
      }
      
      // Check if code was already consumed (prevent "Single-use code" error)
      const codeStr = code as string;
      if (await storage.isCodeConsumed(codeStr)) {
        console.log('OAuth code already consumed, redirecting to success');
        return res.redirect('/cities');
      }
      
      const sessionId = req.cookies.session_id;
      if (!sessionId) {
        return res.redirect('/login?error=No session found');
      }
      
      const session = await storage.getSession(sessionId);
      if (!session || session.state !== state) {
        return res.redirect('/login?error=Invalid state parameter');
      }
      
      // Exchange code for token
      console.log('Exchanging code for token...');
      let tokenResponse;
      try {
        tokenResponse = await exchangeCodeForToken(codeStr, session.codeVerifier!);
        // Mark code as consumed only after successful exchange
        await storage.markCodeAsConsumed(codeStr);
        console.log('Token exchange successful, getting user profile...');
      } catch (error) {
        const errorMessage = error instanceof Error ? error.message : String(error);
        if (errorMessage.includes('Single-use code')) {
          console.log('‚ùå Single-use code error detected. Generating completely fresh OAuth flow...');
          
          // Clear ALL existing sessions and state for this user
          if (sessionId) {
            await storage.deleteSession(sessionId);
          }
          res.clearCookie('session_id');
          
          // Force browser to clear any cached OAuth state by adding cache-busting parameters
          const timestamp = Date.now();
          const clearCacheUrl = `/?clear_cache=${timestamp}&retry=${Math.random().toString(36).substr(2, 9)}`;
          
          console.log('üîÑ Redirecting with cache-busting parameters to ensure fresh OAuth...');
          return res.redirect(clearCacheUrl);
        }
        throw error;
      }
      
      // Get user profile (pass full token response for ID token access)
      const cityCatalystUser = await getUserProfile(tokenResponse.access_token, tokenResponse);
      console.log('User profile retrieved:', cityCatalystUser.email);
      
      // Create or update user
      const user = await createOrUpdateUser(
        cityCatalystUser,
        tokenResponse.access_token,
        tokenResponse.refresh_token
      );
      
      // Update session with user ID
      await storage.updateSession(session.id, {
        userId: user.id,
        expiresAt: new Date(Date.now() + 24 * 60 * 60 * 1000), // 24 hours
      });
      
      // Set long-term session cookie
      res.cookie('session_id', session.id, {
        httpOnly: true,
        secure: process.env.NODE_ENV === 'production',
        maxAge: 24 * 60 * 60 * 1000, // 24 hours
      });
      
      // Redirect to cities page after successful authentication
      res.redirect('/cities');
    } catch (error) {
      console.error('OAuth callback error:', error);
      res.redirect('/login?error=Authentication failed');
    }
  });

  app.post('/api/auth/logout', async (req, res) => {
    try {
      const sessionId = req.cookies.session_id;
      if (sessionId) {
        await storage.deleteSession(sessionId);
      }
      
      res.clearCookie('session_id');
      res.json({ success: true });
    } catch (error) {
      console.error('Logout error:', error);
      res.status(500).json({ message: 'Logout failed' });
    }
  });

  // Authentication middleware
  async function requireAuth(req: any, res: any, next: any) {
    try {
      const sessionId = req.cookies.session_id;
      if (!sessionId) {
        return res.status(401).json({ message: 'Not authenticated' });
      }
      
      const session = await storage.getSession(sessionId);
      if (!session || session.expiresAt < new Date()) {
        return res.status(401).json({ message: 'Session expired' });
      }
      
      const user = await storage.getUser(session.userId);
      if (!user) {
        return res.status(401).json({ message: 'User not found' });
      }
      
      // Check if access token is expired and needs refresh
      if (user.tokenExpiry && user.tokenExpiry < new Date() && user.refreshToken) {
        console.log('üîÑ Access token expired, attempting refresh...');
        // For now, just extend the expiry - proper refresh can be added later
        await storage.updateUser(user.id, {
          tokenExpiry: new Date(Date.now() + 60 * 60 * 1000), // Extend by 1 hour
        });
      }
      
      req.user = user;
      req.session = session;
      next();
    } catch (error) {
      console.error('Auth middleware error:', error);
      res.status(500).json({ message: 'Authentication error' });
    }
  }

  // User routes
  app.get('/api/user/profile', requireAuth, async (req: any, res) => {
    res.json({
      id: req.user.id,
      email: req.user.email,
      name: req.user.name,
      title: req.user.title,
      projects: req.user.projects,
    });
  });

  // City routes
  app.get('/api/cities', requireAuth, async (req: any, res) => {
    try {
      console.log('üèôÔ∏è /api/cities called for user:', req.user.email);
      console.log('User access token present:', !!req.user.accessToken);
      console.log('User projects:', req.user.projects);
      
      // Pass access token to fetch real city data from CityCatalyst
      const cities = await getUserAccessibleCities(req.user.id, req.user.accessToken);
      console.log('Cities returned from service:', cities.length);
      
      res.json({ cities });
    } catch (error) {
      console.error('Get cities error:', error);
      res.status(500).json({ message: 'Failed to fetch cities' });
    }
  });

  app.get('/api/cities/:cityId', requireAuth, async (req: any, res) => {
    try {
      const { cityId } = req.params;
      const city = await getCityById(cityId);
      
      if (!city) {
        return res.status(404).json({ message: 'City not found' });
      }
      
      // Check if user has access to this city
      const userCities = await getUserAccessibleCities(req.user.id);
      const hasAccess = userCities.some(c => c.cityId === cityId);
      
      if (!hasAccess) {
        return res.status(403).json({ message: 'Access denied' });
      }
      
      res.json({ city });
    } catch (error) {
      console.error('Get city error:', error);
      res.status(500).json({ message: 'Failed to fetch city' });
    }
  });

  // Enhanced Boundaries - POST endpoint with embedded logic from implementation guide
  app.post('/api/enhanced-boundaries', async (req: any, res) => {
    try {
      const { city, country, locode } = req.body;
      
      if (!city || !country) {
        return res.status(400).json({ 
          error: 'City and country are required' 
        });
      }

      console.log(`üîç Fetching enhanced boundaries for ${city}, ${country}`);
      
      // Use real OSM service to fetch actual boundary data
      const { searchBoundaries } = await import('./services/osmService');
      const boundaries = await searchBoundaries({ 
        cityName: city, 
        country: country, 
        limit: 5 
      });
      const result = { boundaries };
      
      res.json(result);
      
    } catch (error) {
      console.error('Error in enhanced boundaries endpoint:', error);
      res.status(500).json({ 
        error: 'Failed to fetch enhanced boundaries' 
      });
    }
  });

  // Fallback enhanced boundaries endpoint with sample data (for development/testing)
  app.post('/api/enhanced-boundaries-sample', async (req: any, res) => {
    try {
      const { city, country, locode } = req.body;
      
      if (!city || !country) {
        return res.status(400).json({ 
          error: 'City and country are required' 
        });
      }

      console.log(`üîç Fetching SAMPLE boundaries for ${city}, ${country}`);
      
      // Return sample boundaries with realistic complex geometry (for fallback)
      const sampleBoundaries = [
        {
          osmId: 'relation/1224652',
          osmType: 'relation',
          name: 'Ciudad Aut√≥noma de Buenos Aires',
          adminLevel: '4',
          boundaryType: 'administrative',
          area: 205.63,
          geometry: {
            type: 'Polygon',
            coordinates: [[
              [-58.5315, -34.5250],
              [-58.5100, -34.5180],
              [-58.4850, -34.5120],
              [-58.4600, -34.5080],
              [-58.4350, -34.5070],
              [-58.4100, -34.5090],
              [-58.3850, -34.5130],
              [-58.3600, -34.5190],
              [-58.3450, -34.5280],
              [-58.3350, -34.5400],
              [-58.3280, -34.5550],
              [-58.3250, -34.5720],
              [-58.3280, -34.5890],
              [-58.3350, -34.6060],
              [-58.3450, -34.6220],
              [-58.3600, -34.6350],
              [-58.3800, -34.6450],
              [-58.4020, -34.6520],
              [-58.4260, -34.6580],
              [-58.4520, -34.6620],
              [-58.4780, -34.6640],
              [-58.5040, -34.6620],
              [-58.5280, -34.6580],
              [-58.5480, -34.6520],
              [-58.5650, -34.6430],
              [-58.5780, -34.6320],
              [-58.5870, -34.6180],
              [-58.5920, -34.6020],
              [-58.5930, -34.5850],
              [-58.5890, -34.5680],
              [-58.5820, -34.5520],
              [-58.5720, -34.5380],
              [-58.5580, -34.5280],
              [-58.5415, -34.5240],
              [-58.5315, -34.5250],
            ]],
          },
          tags: {
            name: 'Ciudad Aut√≥noma de Buenos Aires',
            boundary: 'administrative',
            admin_level: '4',
            place: 'city',
            population: '3075646',
          },
          score: 98,
        },
        {
          osmId: 'relation/2672883',
          osmType: 'relation',
          name: 'Buenos Aires',
          adminLevel: '8',
          boundaryType: 'administrative',
          area: 306.45,
          geometry: {
            type: 'Polygon',
            coordinates: [[
              [-58.5119, -34.5468],
              [-58.4920, -34.5420],
              [-58.4720, -34.5380],
              [-58.4520, -34.5350],
              [-58.4320, -34.5340],
              [-58.4120, -34.5350],
              [-58.3920, -34.5380],
              [-58.3750, -34.5430],
              [-58.3600, -34.5500],
              [-58.3480, -34.5590],
              [-58.3390, -34.5700],
              [-58.3330, -34.5820],
              [-58.3300, -34.5950],
              [-58.3300, -34.6080],
              [-58.3330, -34.6210],
              [-58.3390, -34.6330],
              [-58.3480, -34.6440],
              [-58.3600, -34.6530],
              [-58.3750, -34.6600],
              [-58.3920, -34.6650],
              [-58.4120, -34.6680],
              [-58.4320, -34.6690],
              [-58.4520, -34.6680],
              [-58.4720, -34.6650],
              [-58.4920, -34.6600],
              [-58.5119, -34.6530],
              [-58.5300, -34.6440],
              [-58.5460, -34.6330],
              [-58.5590, -34.6200],
              [-58.5680, -34.6050],
              [-58.5730, -34.5890],
              [-58.5740, -34.5720],
              [-58.5710, -34.5560],
              [-58.5640, -34.5420],
              [-58.5530, -34.5300],
              [-58.5380, -34.5210],
              [-58.5200, -34.5150],
              [-58.5000, -34.5120],
              [-58.4800, -34.5120],
              [-58.4620, -34.5150],
              [-58.4460, -34.5210],
              [-58.4330, -34.5300],
              [-58.4240, -34.5420],
              [-58.4190, -34.5560],
              [-58.4180, -34.5720],
              [-58.4210, -34.5890],
              [-58.4280, -34.6050],
              [-58.4390, -34.6200],
              [-58.4540, -34.6330],
              [-58.4720, -34.6440],
              [-58.4930, -34.6530],
              [-58.5160, -34.6600],
              [-58.5400, -34.6650],
              [-58.5630, -34.6680],
              [-58.5840, -34.6690],
              [-58.6020, -34.6680],
              [-58.6170, -34.6650],
              [-58.6280, -34.6600],
              [-58.6350, -34.6530],
              [-58.6380, -34.6440],
              [-58.6370, -34.6330],
              [-58.6320, -34.6210],
              [-58.6230, -34.6080],
              [-58.6100, -34.5950],
              [-58.5930, -34.5820],
              [-58.5720, -34.5700],
              [-58.5470, -34.5590],
              [-58.5180, -34.5500],
              [-58.4850, -34.5430],
              [-58.4480, -34.5380],
              [-58.4070, -34.5350],
              [-58.3620, -34.5340],
              [-58.3130, -34.5350],
              [-58.2600, -34.5380],
              [-58.2030, -34.5430],
              [-58.1420, -34.5500],
              [-58.0770, -34.5590],
              [-58.0080, -34.5700],
              [-57.9350, -34.5820],
              [-57.8580, -34.5950],
              [-57.7770, -34.6080],
              [-57.6920, -34.6210],
              [-57.6030, -34.6330],
              [-57.5100, -34.6440],
              [-57.4130, -34.6530],
              [-57.3120, -34.6600],
              [-57.2070, -34.6650],
              [-57.0980, -34.6680],
              [-56.9850, -34.6690],
              [-56.8680, -34.6680],
              [-56.7470, -34.6650],
              [-56.6220, -34.6600],
              [-56.4930, -34.6530],
              [-56.3600, -34.6440],
              [-56.2230, -34.6330],
              [-56.0820, -34.6200],
              [-55.9370, -34.6050],
              [-55.7880, -34.5890],
              [-55.6350, -34.5720],
              [-55.4780, -34.5540],
              [-55.3170, -34.5350],
              [-55.1520, -34.5150],
              [-54.9830, -34.4940],
              [-54.8100, -34.4720],
              [-54.6330, -34.4490],
              [-54.4520, -34.4250],
              [-54.2670, -34.4000],
              [-54.0780, -34.3740],
              [-53.8850, -34.3470],
              [-53.6880, -34.3190],
              [-53.4870, -34.2900],
              [-53.2820, -34.2600],
              [-53.0730, -34.2290],
              [-52.8600, -34.1970],
              [-52.6430, -34.1640],
              [-52.4220, -34.1300],
              [-52.1970, -34.0950],
              [-51.9680, -34.0590],
              [-51.7350, -34.0220],
              [-51.4980, -33.9840],
              [-51.2570, -33.9450],
              [-51.0120, -33.9050],
              [-50.7630, -33.8640],
              [-50.5100, -33.8220],
              [-50.2530, -33.7790],
              [-49.9920, -33.7350],
              [-49.7270, -33.6900],
              [-49.4580, -33.6440],
              [-49.1850, -33.5970],
              [-48.9080, -33.5490],
              [-48.6270, -33.5000],
              [-48.3420, -33.4500],
              [-48.0530, -33.3990],
              [-47.7600, -33.3470],
              [-47.4630, -33.2940],
              [-47.1620, -33.2400],
              [-46.8570, -33.1850],
              [-46.5480, -33.1290],
              [-46.2350, -33.0720],
              [-45.9180, -33.0140],
              [-45.5970, -32.9550],
              [-45.2720, -32.8950],
              [-44.9430, -32.8340],
              [-44.6100, -32.7720],
              [-44.2730, -32.7090],
              [-43.9320, -32.6450],
              [-43.5870, -32.5800],
              [-43.2380, -32.5140],
              [-42.8850, -32.4470],
              [-42.5280, -32.3790],
              [-42.1670, -32.3100],
              [-41.8020, -32.2400],
              [-41.4330, -32.1690],
              [-41.0600, -32.0970],
              [-40.6830, -32.0240],
              [-40.3020, -31.9500],
              [-39.9170, -31.8750],
              [-39.5280, -31.7990],
              [-39.1350, -31.7220],
              [-38.7380, -31.6440],
              [-38.3370, -31.5650],
              [-37.9320, -31.4850],
              [-37.5230, -31.4040],
              [-37.1100, -31.3220],
              [-36.6930, -31.2390],
              [-36.2720, -31.1550],
              [-35.8470, -31.0700],
              [-35.4180, -30.9840],
              [-34.9850, -30.8970],
              [-34.5480, -30.8090],
              [-34.1070, -30.7200],
              [-33.6620, -30.6300],
              [-33.2130, -30.5390],
              [-32.7600, -30.4470],
              [-32.3030, -30.3540],
              [-31.8420, -30.2600],
              [-31.3770, -30.1650],
              [-30.9080, -30.0690],
              [-30.4350, -29.9720],
              [-29.9580, -29.8740],
              [-29.4770, -29.7750],
              [-28.9920, -29.6750],
              [-28.5030, -29.5740],
              [-28.0100, -29.4720],
              [-27.5130, -29.3690],
              [-27.0120, -29.2650],
              [-26.5070, -29.1600],
              [-25.9980, -29.0540],
              [-25.4850, -28.9470],
              [-24.9680, -28.8390],
              [-24.4470, -28.7300],
              [-23.9220, -28.6200],
              [-23.3930, -28.5090],
              [-22.8600, -28.3970],
              [-22.3230, -28.2840],
              [-21.7820, -28.1700],
              [-21.2370, -28.0550],
              [-20.6880, -27.9390],
              [-20.1350, -27.8220],
              [-19.5780, -27.7040],
              [-19.0170, -27.5850],
              [-18.4520, -27.4650],
              [-17.8830, -27.3440],
              [-17.3100, -27.2220],
              [-16.7330, -27.0990],
              [-16.1520, -26.9750],
              [-15.5670, -26.8500],
              [-14.9780, -26.7240],
              [-14.3850, -26.5970],
              [-13.7880, -26.4690],
              [-13.1870, -26.3400],
              [-12.5820, -26.2100],
              [-11.9730, -26.0790],
              [-11.3600, -25.9470],
              [-10.7430, -25.8140],
              [-10.1220, -25.6800],
              [-9.4970, -25.5450],
              [-8.8680, -25.4090],
              [-8.2350, -25.2720],
              [-7.5980, -25.1340],
              [-6.9570, -24.9950],
              [-6.3120, -24.8550],
              [-5.6630, -24.7140],
              [-5.0100, -24.5720],
              [-4.3530, -24.4290],
              [-3.6920, -24.2850],
              [-3.0270, -24.1400],
              [-2.3580, -23.9940],
              [-1.6850, -23.8470],
              [-1.0080, -23.6990],
              [-0.3270, -23.5500],
              [0.3580, -23.4000],
              [1.0470, -23.2490],
              [1.7400, -23.0970],
              [2.4370, -22.9440],
              [3.1380, -22.7900],
              [3.8430, -22.6350],
              [4.5520, -22.4790],
              [5.2650, -22.3220],
              [5.9820, -22.1640],
              [6.7030, -22.0050],
              [7.4280, -21.8450],
              [8.1570, -21.6840],
              [8.8900, -21.5220],
              [9.6270, -21.3590],
              [10.3680, -21.1950],
              [11.1130, -21.0300],
              [11.8620, -20.8640],
              [12.6150, -20.6970],
              [13.3720, -20.5290],
              [14.1330, -20.3600],
              [14.8980, -20.1900],
              [15.6670, -20.0190],
              [16.4400, -19.8470],
              [17.2170, -19.6740],
              [17.9980, -19.5000],
              [18.7830, -19.3250],
              [19.5720, -19.1490],
              [20.3650, -18.9720],
              [21.1620, -18.7940],
              [21.9630, -18.6150],
              [22.7680, -18.4350],
              [23.5770, -18.2540],
              [24.3900, -18.0720],
              [25.2070, -17.8890],
              [26.0280, -17.7050],
              [26.8530, -17.5200],
              [27.6820, -17.3340],
              [28.5150, -17.1470],
              [29.3520, -16.9590],
              [30.1930, -16.7700],
              [31.0380, -16.5800],
              [31.8870, -16.3890],
              [32.7400, -16.1970],
              [33.5970, -16.0040],
              [34.4580, -15.8100],
              [35.3230, -15.6150],
              [36.1920, -15.4190],
              [37.0650, -15.2220],
              [37.9420, -15.0240],
              [38.8230, -14.8250],
              [39.7080, -14.6250],
              [40.5970, -14.4240],
              [41.4900, -14.2220],
              [42.3870, -14.0190],
              [43.2880, -13.8150],
              [44.1930, -13.6100],
              [45.1020, -13.4040],
              [46.0150, -13.1970],
              [46.9320, -12.9890],
              [47.8530, -12.7800],
              [48.7780, -12.5700],
              [49.7070, -12.3590],
              [50.6400, -12.1470],
              [51.5770, -11.9340],
              [52.5180, -11.7200],
              [53.4630, -11.5050],
              [54.4120, -11.2890],
              [55.3650, -11.0720],
              [56.3220, -10.8540],
              [57.2830, -10.6350],
              [58.2480, -10.4150],
              [59.2170, -10.1940],
              [60.1900, -9.9720],
              [61.1670, -9.7490],
              [62.1480, -9.5250],
              [63.1330, -9.3000],
              [64.1220, -9.0740],
              [65.1150, -8.8470],
              [66.1120, -8.6190],
              [67.1130, -8.3900],
              [68.1180, -8.1600],
              [69.1270, -7.9290],
              [70.1400, -7.6970],
              [71.1570, -7.4640],
              [72.1780, -7.2300],
              [73.2030, -6.9950],
              [74.2320, -6.7590],
              [75.2650, -6.5220],
              [76.3020, -6.2840],
              [77.3430, -6.0450],
              [78.3880, -5.8050],
              [79.4370, -5.5640],
              [80.4900, -5.3220],
              [81.5470, -5.0790],
              [82.6080, -4.8350],
              [83.6730, -4.5900],
              [84.7420, -4.3440],
              [85.8150, -4.0970],
              [86.8920, -3.8490],
              [87.9730, -3.6000],
              [89.0580, -3.3500],
              [90.1470, -3.0990],
              [91.2400, -2.8470],
              [92.3370, -2.5940],
              [93.4380, -2.3400],
              [94.5430, -2.0850],
              [95.6520, -1.8290],
              [96.7650, -1.5720],
              [97.8820, -1.3140],
              [99.0030, -1.0550],
              [100.1280, -0.7950],
              [101.2570, -0.5340],
              [102.3900, -0.2720],
              [103.5270, -0.0090],
              [104.6680, 0.2550],
              [105.8130, 0.5200],
              [106.9620, 0.7860],
              [108.1150, 1.0530],
              [109.2720, 1.3210],
              [110.4330, 1.5900],
              [111.5980, 1.8600],
              [112.7670, 2.1310],
              [113.9400, 2.4030],
              [115.1170, 2.6760],
              [116.2980, 2.9500],
              [117.4830, 3.2250],
              [118.6720, 3.5010],
              [119.8650, 3.7780],
              [121.0620, 4.0560],
              [122.2630, 4.3350],
              [123.4680, 4.6150],
              [124.6770, 4.8960],
              [125.8900, 5.1780],
              [127.1070, 5.4610],
              [128.3280, 5.7450],
              [129.5530, 6.0300],
              [130.7820, 6.3160],
              [132.0150, 6.6030],
              [133.2520, 6.8910],
              [134.4930, 7.1800],
              [135.7380, 7.4700],
              [136.9870, 7.7610],
              [138.2400, 8.0530],
              [139.4970, 8.3460],
              [140.7580, 8.6400],
              [142.0230, 8.9350],
              [143.2920, 9.2310],
              [144.5650, 9.5280],
              [145.8420, 9.8260],
              [147.1230, 10.1250],
              [148.4080, 10.4250],
              [149.6970, 10.7260],
              [150.9900, 11.0280],
              [152.2870, 11.3310],
              [153.5880, 11.6350],
              [154.8930, 11.9400],
              [156.2020, 12.2460],
              [157.5150, 12.5530],
              [158.8320, 12.8610],
              [160.1530, 13.1700],
              [161.4780, 13.4800],
              [162.8070, 13.7910],
              [164.1400, 14.1030],
              [165.4770, 14.4160],
              [166.8180, 14.7300],
              [168.1630, 15.0450],
              [169.5120, 15.3610],
              [170.8650, 15.6780],
              [172.2220, 15.9960],
              [173.5830, 16.3150],
              [174.9480, 16.6350],
              [176.3170, 16.9560],
              [177.6900, 17.2780],
              [179.0670, 17.6010],
              [-179.5520, 17.9250],
              [-178.1750, 18.2500],
              [-176.7930, 18.5760],
              [-175.4060, 18.9030],
              [-174.0140, 19.2310],
              [-172.6170, 19.5600],
              [-171.2150, 19.8900],
              [-169.8080, 20.2210],
              [-168.3960, 20.5530],
              [-166.9790, 20.8860],
              [-165.5570, 21.2200],
              [-164.1300, 21.5550],
              [-162.6980, 21.8910],
              [-161.2610, 22.2280],
              [-159.8190, 22.5660],
              [-158.3720, 22.9050],
              [-156.9200, 23.2450],
              [-155.4630, 23.5860],
              [-154.0010, 23.9280],
              [-152.5340, 24.2710],
              [-151.0620, 24.6150],
              [-149.5850, 24.9600],
              [-148.1030, 25.3060],
              [-146.6160, 25.6530],
              [-145.1240, 26.0010],
              [-143.6270, 26.3500],
              [-142.1250, 26.7000],
              [-140.6180, 27.0510],
              [-139.1060, 27.4030],
              [-137.5890, 27.7560],
              [-136.0670, 28.1100],
              [-134.5400, 28.4650],
              [-133.0080, 28.8210],
              [-131.4710, 29.1780],
              [-129.9290, 29.5360],
              [-128.3820, 29.8950],
              [-126.8300, 30.2550],
              [-125.2730, 30.6160],
              [-123.7110, 30.9780],
              [-122.1440, 31.3410],
              [-120.5720, 31.7050],
              [-118.9950, 32.0700],
              [-117.4130, 32.4360],
              [-115.8260, 32.8030],
              [-114.2340, 33.1710],
              [-112.6370, 33.5400],
              [-111.0350, 33.9100],
              [-109.4280, 34.2810],
              [-107.8160, 34.6530],
              [-106.1990, 35.0260],
              [-104.5770, 35.4000],
              [-102.9500, 35.7750],
              [-101.3180, 36.1510],
              [-99.6810, 36.5280],
              [-98.0390, 36.9060],
              [-96.3920, 37.2850],
              [-94.7400, 37.6650],
              [-93.0830, 38.0460],
              [-91.4210, 38.4280],
              [-89.7540, 38.8110],
              [-88.0820, 39.1950],
              [-86.4050, 39.5800],
              [-84.7230, 39.9660],
              [-83.0360, 40.3530],
              [-81.3440, 40.7410],
              [-79.6470, 41.1300],
              [-77.9450, 41.5200],
              [-76.2380, 41.9110],
              [-74.5260, 42.3030],
              [-72.8090, 42.6960],
              [-71.0870, 43.0900],
              [-69.3600, 43.4850],
              [-67.6280, 43.8810],
              [-65.8910, 44.2780],
              [-64.1490, 44.6760],
              [-62.4020, 45.0750],
              [-60.6500, 45.4750],
              [-58.8930, 45.8760],
              [-57.1310, 46.2780],
              [-55.3640, 46.6810],
              [-53.5920, 47.0850],
              [-51.8150, 47.4900],
              [-50.0330, 47.8960],
              [-48.2460, 48.3030],
              [-46.4540, 48.7110],
              [-44.6570, 49.1200],
              [-42.8550, 49.5300],
              [-41.0480, 49.9410],
              [-39.2360, 50.3530],
              [-37.4190, 50.7660],
              [-35.5970, 51.1800],
              [-33.7700, 51.5950],
              [-31.9380, 52.0110],
              [-30.1010, 52.4280],
              [-28.2590, 52.8460],
              [-26.4120, 53.2650],
              [-24.5600, 53.6850],
              [-22.7030, 54.1060],
              [-20.8410, 54.5280],
              [-18.9740, 54.9510],
              [-17.1020, 55.3750],
              [-15.2250, 55.8000],
              [-13.3430, 56.2260],
              [-11.4560, 56.6530],
              [-9.5640, 57.0810],
              [-7.6670, 57.5100],
              [-5.7650, 57.9400],
              [-3.8580, 58.3710],
              [-1.9460, 58.8030],
              [-0.0290, 59.2360],
              [1.8930, 59.6700],
              [3.8200, 60.1050],
              [5.7520, 60.5410],
              [7.6890, 60.9780],
              [9.6310, 61.4160],
              [11.5780, 61.8550],
              [13.5300, 62.2950],
              [15.4870, 62.7360],
              [17.4490, 63.1780],
              [19.4160, 63.6210],
              [21.3880, 64.0650],
              [23.3650, 64.5100],
              [25.3470, 64.9560],
              [27.3340, 65.4030],
              [29.3260, 65.8510],
              [31.3230, 66.3000],
              [33.3250, 66.7500],
              [35.3320, 67.2010],
              [37.3440, 67.6530],
              [39.3610, 68.1060],
              [41.3830, 68.5600],
              [43.4100, 69.0150],
              [45.4420, 69.4710],
              [47.4790, 69.9280],
              [49.5210, 70.3860],
              [51.5680, 70.8450],
              [53.6200, 71.3050],
              [55.6770, 71.7660],
              [57.7390, 72.2280],
              [59.8060, 72.6910],
              [61.8780, 73.1550],
              [63.9550, 73.6200],
              [66.0370, 74.0860],
              [68.1240, 74.5530],
              [70.2160, 75.0210],
              [72.3130, 75.4900],
              [74.4150, 75.9600],
              [76.5220, 76.4310],
              [78.6340, 76.9030],
              [80.7510, 77.3760],
              [82.8730, 77.8500],
              [85.0000, 78.3250],
              [87.1320, 78.8010],
              [89.2690, 79.2780],
              [91.4110, 79.7560],
              [93.5580, 80.2350],
              [95.7100, 80.7150],
              [97.8670, 81.1960],
              [100.0290, 81.6780],
              [102.1960, 82.1610],
              [104.3680, 82.6450],
              [106.5450, 83.1300],
              [108.7270, 83.6160],
              [110.9140, 84.1030],
              [113.1060, 84.5910],
              [115.3030, 85.0800],
              [117.5050, 85.5700],
              [119.7120, 86.0610],
              [121.9240, 86.5530],
              [124.1410, 87.0460],
              [126.3630, 87.5400],
              [128.5900, 88.0350],
              [130.8220, 88.5310],
              [133.0590, 89.0280],
              [135.3010, 89.5260],
              [137.5480, 90.0250],
              [139.8000, 90.5250],
              [142.0570, 91.0260],
              [144.3190, 91.5280],
              [146.5860, 92.0310],
              [148.8580, 92.5350],
              [151.1350, 93.0400],
              [153.4170, 93.5460],
              [155.7040, 94.0530],
              [157.9960, 94.5610],
              [160.2930, 95.0700],
              [162.5950, 95.5800],
              [164.9020, 96.0910],
              [167.2140, 96.6030],
              [169.5310, 97.1160],
              [171.8530, 97.6300],
              [174.1800, 98.1450],
              [176.5120, 98.6610],
              [178.8490, 99.1780],
              [-178.1910, 99.6960],
              [-175.8500, 100.2150],
              [-173.5040, 100.7350],
              [-171.1530, 101.2560],
              [-168.7970, 101.7780],
              [-166.4360, 102.3010],
              [-164.0700, 102.8250],
              [-161.6990, 103.3500],
              [-159.3230, 103.8760],
              [-156.9420, 104.4030],
              [-154.5560, 104.9310],
              [-152.1650, 105.4600],
              [-149.7690, 105.9900],
              [-147.3680, 106.5210],
              [-144.9620, 107.0530],
              [-142.5510, 107.5860],
              [-140.1350, 108.1200],
              [-137.7140, 108.6550],
              [-135.2880, 109.1910],
              [-132.8570, 109.7280],
              [-130.4210, 110.2660],
              [-127.9800, 110.8050],
              [-125.5340, 111.3450],
              [-123.0830, 111.8860],
              [-120.6270, 112.4280],
              [-118.1660, 112.9710],
              [-115.7000, 113.5150],
              [-113.2290, 114.0600],
              [-110.7530, 114.6060],
              [-108.2720, 115.1530],
              [-105.7860, 115.7010],
              [-103.2950, 116.2500],
              [-100.7990, 116.8000],
              [-98.2980, 117.3510],
              [-95.7920, 117.9030],
              [-93.2810, 118.4560],
              [-90.7650, 119.0100],
              [-88.2440, 119.5650],
              [-85.7180, 120.1210],
              [-83.1870, 120.6780],
              [-80.6510, 121.2360],
              [-78.1100, 121.7950],
              [-75.5640, 122.3550],
              [-73.0130, 122.9160],
              [-70.4570, 123.4780],
              [-67.8960, 124.0410],
              [-65.3300, 124.6050],
              [-62.7590, 125.1700],
              [-60.1830, 125.7360],
              [-57.6020, 126.3030],
              [-55.0160, 126.8710],
              [-52.4250, 127.4400],
              [-49.8290, 128.0100],
              [-47.2280, 128.5810],
              [-44.6220, 129.1530],
              [-42.0110, 129.7260],
              [-39.3950, 130.3000],
              [-36.7740, 130.8750],
              [-34.1480, 131.4510],
              [-31.5170, 132.0280],
              [-28.8810, 132.6060],
              [-26.2400, 133.1850],
              [-23.5940, 133.7650],
              [-20.9430, 134.3460],
              [-18.2870, 134.9280],
              [-15.6260, 135.5110],
              [-12.9600, 136.0950],
              [-10.2890, 136.6800],
              [-7.6130, 137.2660],
              [-4.9320, 137.8530],
              [-2.2460, 138.4410],
              [0.4450, 139.0300],
              [3.1410, 139.6200],
              [5.8420, 140.2110],
              [8.5480, 140.8030],
              [11.2590, 141.3960],
              [13.9750, 141.9900],
              [16.6960, 142.5850],
              [19.4220, 143.1810],
              [22.1530, 143.7780],
              [24.8890, 144.3760],
              [27.6300, 144.9750],
              [30.3760, 145.5750],
              [33.1270, 146.1760],
              [35.8830, 146.7780],
              [38.6440, 147.3810],
              [41.4100, 147.9850],
              [44.1810, 148.5900],
              [46.9570, 149.1960],
              [49.7380, 149.8030],
              [52.5240, 150.4110],
              [55.3150, 151.0200],
              [58.1110, 151.6300],
              [60.9120, 152.2410],
              [63.7180, 152.8530],
              [66.5290, 153.4660],
              [69.3450, 154.0800],
              [72.1660, 154.6950],
              [74.9920, 155.3110],
              [77.8230, 155.9280],
              [80.6590, 156.5460],
              [83.5000, 157.1650],
              [86.3460, 157.7850],
              [89.1970, 158.4060],
              [92.0530, 159.0280],
              [94.9140, 159.6510],
              [97.7800, 160.2750],
              [100.6510, 160.9000],
              [103.5270, 161.5260],
              [106.4080, 162.1530],
              [109.2940, 162.7810],
              [112.1850, 163.4100],
              [115.0810, 164.0400],
              [117.9820, 164.6710],
              [120.8880, 165.3030],
              [123.7990, 165.9360],
              [126.7150, 166.5700],
              [129.6360, 167.2050],
              [132.5620, 167.8410],
              [135.4930, 168.4780],
              [138.4290, 169.1160],
              [141.3700, 169.7550],
              [144.3160, 170.3950],
              [147.2670, 171.0360],
              [150.2230, 171.6780],
              [153.1840, 172.3210],
              [156.1500, 172.9650],
              [159.1210, 173.6100],
              [162.0970, 174.2560],
              [165.0780, 174.9030],
              [168.0640, 175.5510],
              [171.0550, 176.2000],
              [174.0510, 176.8500],
              [177.0520, 177.5010],
              [-179.9420, 178.1530],
              [-176.9380, 178.8060],
              [-173.9290, 179.4600],
              [-170.9150, -179.8850],
              [-167.8960, -179.2290],
              [-164.8720, -178.5720],
              [-161.8430, -177.9140],
              [-158.8090, -177.2550],
              [-155.7700, -176.5950],
              [-152.7260, -175.9340],
              [-149.6770, -175.2720],
              [-146.6230, -174.6090],
              [-143.5640, -173.9450],
              [-140.5000, -173.2800],
              [-137.4310, -172.6140],
              [-134.3570, -171.9470],
              [-131.2780, -171.2790],
              [-128.1940, -170.6100],
              [-125.1050, -169.9400],
              [-122.0110, -169.2690],
              [-118.9120, -168.5970],
              [-115.8080, -167.9240],
              [-112.6990, -167.2500],
              [-109.5850, -166.5750],
              [-106.4660, -165.8990],
              [-103.3420, -165.2220],
              [-100.2130, -164.5440],
              [-97.0790, -163.8650],
              [-93.9400, -163.1850],
              [-90.7960, -162.5040],
              [-87.6470, -161.8220],
              [-84.4930, -161.1390],
              [-81.3340, -160.4550],
              [-78.1700, -159.7700],
              [-75.0010, -159.0840],
              [-71.8270, -158.3970],
              [-68.6480, -157.7090],
              [-65.4640, -157.0200],
              [-62.2750, -156.3300],
              [-59.0810, -155.6390],
              [-55.8820, -154.9470],
              [-52.6780, -154.2540],
              [-49.4690, -153.5600],
              [-46.2550, -152.8650],
              [-43.0360, -152.1690],
              [-39.8120, -151.4720],
              [-36.5830, -150.7740],
              [-33.3490, -150.0750],
              [-30.1100, -149.3750],
              [-26.8660, -148.6740],
              [-23.6170, -147.9720],
              [-20.3630, -147.2690],
              [-17.1040, -146.5650],
              [-13.8400, -145.8600],
              [-10.5710, -145.1540],
              [-7.2970, -144.4470],
              [-4.0180, -143.7390],
              [-0.7340, -143.0300],
              [2.5550, -142.3200],
              [5.8490, -141.6090],
              [9.1480, -140.8970],
              [12.4520, -140.1840],
              [15.7610, -139.4700],
              [19.0750, -138.7550],
              [22.3940, -138.0390],
              [25.7180, -137.3220],
              [29.0470, -136.6040],
              [32.3810, -135.8850],
              [35.7200, -135.1650],
              [39.0640, -134.4440],
              [42.4130, -133.7220],
              [45.7670, -132.9990],
              [49.1260, -132.2750],
              [52.4900, -131.5500],
              [55.8590, -130.8240],
              [59.2330, -130.0970],
              [62.6120, -129.3690],
              [65.9960, -128.6400],
              [69.3850, -127.9100],
              [72.7790, -127.1790],
              [76.1780, -126.4470],
              [79.5820, -125.7140],
              [82.9910, -124.9800],
              [86.4050, -124.2450],
              [89.8240, -123.5090],
              [93.2480, -122.7720],
              [96.6770, -122.0340],
              [100.1110, -121.2950],
              [103.5500, -120.5550],
              [106.9940, -119.8140],
              [110.4430, -119.0720],
              [113.8970, -118.3290],
              [117.3560, -117.5850],
              [120.8200, -116.8400],
              [124.2890, -116.0940],
              [127.7630, -115.3470],
              [131.2420, -114.5990],
              [134.7260, -113.8500],
              [138.2150, -113.1000],
              [141.7090, -112.3490],
              [145.2080, -111.5970],
              [148.7120, -110.8440],
              [152.2210, -110.0900],
              [155.7350, -109.3350],
              [159.2540, -108.5790],
              [162.7780, -107.8220],
              [166.3070, -107.0640],
              [169.8410, -106.3050],
              [173.3800, -105.5450],
              [176.9240, -104.7840],
              [-179.5280, -104.0220],
              [-176.0200, -103.2590],
              [-172.5070, -102.4950],
              [-168.9890, -101.7300],
              [-165.4660, -100.9640],
              [-161.9380, -100.1970],
              [-158.4050, -99.4290],
              [-154.8670, -98.6600],
              [-151.3240, -97.8900],
              [-147.7760, -97.1190],
              [-144.2230, -96.3470],
              [-140.6650, -95.5740],
              [-137.1020, -94.8000],
              [-133.5340, -94.0250],
              [-129.9610, -93.2490],
              [-126.3830, -92.4720],
              [-122.8000, -91.6940],
              [-119.2120, -90.9150],
              [-115.6190, -90.1350],
              [-112.0210, -89.3540],
              [-108.4180, -88.5720],
              [-104.8100, -87.7890],
              [-101.1970, -87.0050],
              [-97.5790, -86.2200],
              [-93.9560, -85.4340],
              [-90.3280, -84.6470],
              [-86.6950, -83.8590],
              [-83.0570, -83.0700],
              [-79.4140, -82.2800],
              [-75.7660, -81.4890],
              [-72.1130, -80.6970],
              [-68.4550, -79.9040],
              [-64.7920, -79.1100],
              [-61.1240, -78.3150],
              [-57.4510, -77.5190],
              [-53.7730, -76.7220],
              [-50.0900, -75.9240],
              [-46.4020, -75.1250],
              [-42.7090, -74.3250],
              [-39.0110, -73.5240],
              [-35.3080, -72.7220],
              [-31.6000, -71.9190],
              [-27.8870, -71.1150],
              [-24.1690, -70.3100],
              [-20.4460, -69.5040],
              [-16.7180, -68.6970],
              [-12.9850, -67.8890],
              [-9.2470, -67.0800],
              [-5.5040, -66.2700],
              [-1.7560, -65.4590],
              [1.9970, -64.6470],
              [5.7550, -63.8340],
              [9.5180, -63.0200],
              [13.2860, -62.2050],
              [17.0590, -61.3890],
              [20.8370, -60.5720],
              [24.6200, -59.7540],
              [28.4080, -58.9350],
              [32.2010, -58.1150],
              [35.9990, -57.2940],
              [39.8020, -56.4720],
              [43.6100, -55.6490],
              [47.4230, -54.8250],
              [51.2410, -54.0000],
              [55.0640, -53.1740],
              [58.8920, -52.3470],
              [62.7250, -51.5190],
              [66.5630, -50.6900],
              [70.4060, -49.8600],
              [74.2540, -49.0290],
              [78.1070, -48.1970],
              [81.9650, -47.3640],
              [85.8280, -46.5300],
              [89.6960, -45.6950],
              [93.5690, -44.8590],
              [97.4470, -44.0220],
              [101.3300, -43.1840],
              [105.2180, -42.3450],
              [109.1110, -41.5050],
              [113.0090, -40.6640],
              [116.9120, -39.8220],
              [120.8200, -38.9790],
              [124.7330, -38.1350],
              [128.6510, -37.2900],
              [132.5740, -36.4440],
              [136.5020, -35.5970],
              [140.4350, -34.7490],
              [144.3730, -33.9000],
              [148.3160, -33.0500],
              [152.2640, -32.1990],
              [156.2170, -31.3470],
              [160.1750, -30.4940],
              [164.1380, -29.6400],
              [168.1060, -28.7850],
              [172.0790, -27.9290],
              [176.0570, -27.0720],
              [-179.9600, -26.2140],
              [-175.9770, -25.3550],
              [-171.9890, -24.4950],
              [-168.0060, -23.6340],
              [-164.0280, -22.7720],
              [-160.0550, -21.9090],
              [-156.0870, -21.0450],
              [-152.1240, -20.1800],
              [-148.1660, -19.3140],
              [-144.2130, -18.4470],
              [-140.2650, -17.5790],
              [-136.3220, -16.7100],
              [-132.3840, -15.8400],
              [-128.4510, -14.9690],
              [-124.5230, -14.0970],
              [-120.6000, -13.2240],
              [-116.6820, -12.3500],
              [-112.7690, -11.4750],
              [-108.8610, -10.5990],
              [-104.9580, -9.7220],
              [-101.0600, -8.8440],
              [-97.1670, -7.9650],
              [-93.2790, -7.0850],
              [-89.3960, -6.2040],
              [-85.5180, -5.3220],
              [-81.6450, -4.4390],
              [-77.7770, -3.5550],
              [-73.9140, -2.6700],
              [-70.0560, -1.7840],
              [-66.2030, -0.8970],
              [-62.3550, -0.0090],
              [-58.5119, -34.5468],
            ]],
          },
          tags: {
            name: 'Buenos Aires',
            boundary: 'administrative',
            admin_level: '8',
            place: 'municipality',
            population: '2890151',
          },
          score: 85,
        },
      ];
      
      console.log(`‚úÖ Returning ${sampleBoundaries.length} sample boundaries for ${city}`);
      
      res.json({
        boundaries: sampleBoundaries
      });
      
    } catch (error) {
      console.error('Error in enhanced boundaries endpoint:', error);
      res.status(500).json({ 
        error: 'Failed to fetch enhanced boundaries' 
      });
    }
  });

  // Boundary routes
  app.get('/api/boundaries/search', requireAuth, async (req: any, res) => {
    try {
      const { cityName, country, countryCode, limit } = req.query;
      
      if (!cityName || !country) {
        return res.status(400).json({ message: 'cityName and country are required' });
      }
      
      const boundaries = await searchBoundaries({
        cityName: cityName as string,
        country: country as string,
        countryCode: countryCode as string,
        limit: limit ? parseInt(limit as string) : undefined,
      });
      
      res.json({ boundaries });
    } catch (error) {
      console.error('Boundary search error:', error);
      res.status(500).json({ message: 'Failed to search boundaries' });
    }
  });

  app.post('/api/boundaries/select', requireAuth, async (req: any, res) => {
    try {
      const { cityId, osmId, osmType } = req.body;
      
      if (!cityId || !osmId || !osmType) {
        return res.status(400).json({ message: 'cityId, osmId, and osmType are required' });
      }
      
      // Check if user has access to this city
      const userCities = await getUserAccessibleCities(req.user.id);
      const hasAccess = userCities.some(c => c.cityId === cityId);
      
      if (!hasAccess) {
        return res.status(403).json({ message: 'Access denied' });
      }
      
      // Get full geometry
      const geometry = await getBoundaryGeometry(osmId, osmType);
      
      if (!geometry) {
        return res.status(404).json({ message: 'Boundary geometry not found' });
      }
      
      // Clear existing selected boundaries for this city
      const existingBoundaries = await storage.getBoundariesByCityId(cityId);
      for (const boundary of existingBoundaries) {
        await storage.updateBoundary(boundary.id, { isSelected: false });
      }
      
      // Create or update the selected boundary
      const boundary = await storage.createBoundary({
        osmId,
        osmType,
        cityId,
        name: `Boundary ${osmId}`,
        geometry,
        tags: {},
        isSelected: true,
      });
      
      res.json({
        geometry,
        metadata: {
          osmId,
          osmType,
          area: boundary.area,
        },
      });
    } catch (error) {
      console.error('Boundary selection error:', error);
      res.status(500).json({ message: 'Failed to select boundary' });
    }
  });

  app.get('/api/boundaries/:cityId', requireAuth, async (req: any, res) => {
    try {
      const { cityId } = req.params;
      
      // Check if user has access to this city
      const userCities = await getUserAccessibleCities(req.user.id);
      const hasAccess = userCities.some(c => c.cityId === cityId);
      
      if (!hasAccess) {
        return res.status(403).json({ message: 'Access denied' });
      }
      
      const boundaries = await storage.getBoundariesByCityId(cityId);
      res.json({ boundaries });
    } catch (error) {
      console.error('Get boundaries error:', error);
      res.status(500).json({ message: 'Failed to fetch boundaries' });
    }
  });

  app.get('/api/boundaries/download/:osmId', requireAuth, async (req: any, res) => {
    try {
      const { osmId } = req.params;
      
      // Find boundary by OSM ID
      const boundaries = await storage.getBoundariesByCityId(''); // This needs improvement
      const boundary = boundaries.find(b => b.osmId === osmId);
      
      if (!boundary) {
        return res.status(404).json({ message: 'Boundary not found' });
      }
      
      const geoJson = {
        type: 'FeatureCollection',
        features: [{
          type: 'Feature',
          id: `${boundary.osmType}/${boundary.osmId}`,
          properties: {
            osm_id: boundary.osmId,
            osm_type: boundary.osmType,
            name: boundary.name,
            admin_level: boundary.adminLevel,
            boundary: boundary.boundaryType,
            ...boundary.tags,
          },
          geometry: boundary.geometry,
        }],
      };
      
      res.setHeader('Content-Type', 'application/json');
      res.setHeader('Content-Disposition', `attachment; filename="${boundary.name}-boundary.geojson"`);
      res.json(geoJson);
    } catch (error) {
      console.error('Boundary download error:', error);
      res.status(500).json({ message: 'Failed to download boundary' });
    }
  });

  const httpServer = createServer(app);
  return httpServer;
}
